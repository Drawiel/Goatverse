//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Goatverse.GoatverseService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserData", Namespace="http://schemas.datacontract.org/2004/07/GoatverseService")]
    [System.SerializableAttribute()]
    public partial class UserData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IdUser {
            get {
                return this.IdUserField;
            }
            set {
                if ((object.ReferenceEquals(this.IdUserField, value) != true)) {
                    this.IdUserField = value;
                    this.RaisePropertyChanged("IdUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageData", Namespace="http://schemas.datacontract.org/2004/07/GoatverseService")]
    [System.SerializableAttribute()]
    public partial class MessageData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LobbyCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IdUser {
            get {
                return this.IdUserField;
            }
            set {
                if ((object.ReferenceEquals(this.IdUserField, value) != true)) {
                    this.IdUserField = value;
                    this.RaisePropertyChanged("IdUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LobbyCode {
            get {
                return this.LobbyCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.LobbyCodeField, value) != true)) {
                    this.LobbyCodeField = value;
                    this.RaisePropertyChanged("LobbyCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerData", Namespace="http://schemas.datacontract.org/2004/07/GoatverseService")]
    [System.SerializableAttribute()]
    public partial class PlayerData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImageId {
            get {
                return this.ImageIdField;
            }
            set {
                if ((this.ImageIdField.Equals(value) != true)) {
                    this.ImageIdField = value;
                    this.RaisePropertyChanged("ImageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Level {
            get {
                return this.LevelField;
            }
            set {
                if ((this.LevelField.Equals(value) != true)) {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProfileData", Namespace="http://schemas.datacontract.org/2004/07/GoatverseService")]
    [System.SerializableAttribute()]
    public partial class ProfileData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdProfileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MatchesWonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProfileLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalPointsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdProfile {
            get {
                return this.IdProfileField;
            }
            set {
                if ((this.IdProfileField.Equals(value) != true)) {
                    this.IdProfileField = value;
                    this.RaisePropertyChanged("IdProfile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdUser {
            get {
                return this.IdUserField;
            }
            set {
                if ((this.IdUserField.Equals(value) != true)) {
                    this.IdUserField = value;
                    this.RaisePropertyChanged("IdUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImageId {
            get {
                return this.ImageIdField;
            }
            set {
                if ((this.ImageIdField.Equals(value) != true)) {
                    this.ImageIdField = value;
                    this.RaisePropertyChanged("ImageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MatchesWon {
            get {
                return this.MatchesWonField;
            }
            set {
                if ((this.MatchesWonField.Equals(value) != true)) {
                    this.MatchesWonField = value;
                    this.RaisePropertyChanged("MatchesWon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProfileLevel {
            get {
                return this.ProfileLevelField;
            }
            set {
                if ((this.ProfileLevelField.Equals(value) != true)) {
                    this.ProfileLevelField = value;
                    this.RaisePropertyChanged("ProfileLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalPoints {
            get {
                return this.TotalPointsField;
            }
            set {
                if ((this.TotalPointsField.Equals(value) != true)) {
                    this.TotalPointsField = value;
                    this.RaisePropertyChanged("TotalPoints");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MatchData", Namespace="http://schemas.datacontract.org/2004/07/GoatverseService")]
    [System.SerializableAttribute()]
    public partial class MatchData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdMatchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdWinnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IdMatch {
            get {
                return this.IdMatchField;
            }
            set {
                if ((object.ReferenceEquals(this.IdMatchField, value) != true)) {
                    this.IdMatchField = value;
                    this.RaisePropertyChanged("IdMatch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IdWinner {
            get {
                return this.IdWinnerField;
            }
            set {
                if ((object.ReferenceEquals(this.IdWinnerField, value) != true)) {
                    this.IdWinnerField = value;
                    this.RaisePropertyChanged("IdWinner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CardData", Namespace="http://schemas.datacontract.org/2004/07/GoatverseService")]
    [System.SerializableAttribute()]
    public partial class CardData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CardNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CardTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EffectDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdCardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImageCardIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PointsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CardName {
            get {
                return this.CardNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CardNameField, value) != true)) {
                    this.CardNameField = value;
                    this.RaisePropertyChanged("CardName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CardType {
            get {
                return this.CardTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.CardTypeField, value) != true)) {
                    this.CardTypeField = value;
                    this.RaisePropertyChanged("CardType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EffectDescription {
            get {
                return this.EffectDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.EffectDescriptionField, value) != true)) {
                    this.EffectDescriptionField = value;
                    this.RaisePropertyChanged("EffectDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdCard {
            get {
                return this.IdCardField;
            }
            set {
                if ((this.IdCardField.Equals(value) != true)) {
                    this.IdCardField = value;
                    this.RaisePropertyChanged("IdCard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImageCardId {
            get {
                return this.ImageCardIdField;
            }
            set {
                if ((this.ImageCardIdField.Equals(value) != true)) {
                    this.ImageCardIdField = value;
                    this.RaisePropertyChanged("ImageCardId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Points {
            get {
                return this.PointsField;
            }
            set {
                if ((this.PointsField.Equals(value) != true)) {
                    this.PointsField = value;
                    this.RaisePropertyChanged("Points");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GoatverseService.IUsersManager")]
    public interface IUsersManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/ServiceTryLogin", ReplyAction="http://tempuri.org/IUsersManager/ServiceTryLoginResponse")]
        bool ServiceTryLogin(Goatverse.GoatverseService.UserData userData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/ServiceTryLogin", ReplyAction="http://tempuri.org/IUsersManager/ServiceTryLoginResponse")]
        System.Threading.Tasks.Task<bool> ServiceTryLoginAsync(Goatverse.GoatverseService.UserData userData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/ServiceTrySignIn", ReplyAction="http://tempuri.org/IUsersManager/ServiceTrySignInResponse")]
        bool ServiceTrySignIn(Goatverse.GoatverseService.UserData userData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/ServiceTrySignIn", ReplyAction="http://tempuri.org/IUsersManager/ServiceTrySignInResponse")]
        System.Threading.Tasks.Task<bool> ServiceTrySignInAsync(Goatverse.GoatverseService.UserData userData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/ServiceUserExistsByUsername", ReplyAction="http://tempuri.org/IUsersManager/ServiceUserExistsByUsernameResponse")]
        bool ServiceUserExistsByUsername(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/ServiceUserExistsByUsername", ReplyAction="http://tempuri.org/IUsersManager/ServiceUserExistsByUsernameResponse")]
        System.Threading.Tasks.Task<bool> ServiceUserExistsByUsernameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/ServiceVerifyPassword", ReplyAction="http://tempuri.org/IUsersManager/ServiceVerifyPasswordResponse")]
        bool ServiceVerifyPassword(string password, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/ServiceVerifyPassword", ReplyAction="http://tempuri.org/IUsersManager/ServiceVerifyPasswordResponse")]
        System.Threading.Tasks.Task<bool> ServiceVerifyPasswordAsync(string password, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/ServicePasswordChanged", ReplyAction="http://tempuri.org/IUsersManager/ServicePasswordChangedResponse")]
        bool ServicePasswordChanged(Goatverse.GoatverseService.UserData userData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/ServicePasswordChanged", ReplyAction="http://tempuri.org/IUsersManager/ServicePasswordChangedResponse")]
        System.Threading.Tasks.Task<bool> ServicePasswordChangedAsync(Goatverse.GoatverseService.UserData userData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/ServiceUsernameChanged", ReplyAction="http://tempuri.org/IUsersManager/ServiceUsernameChangedResponse")]
        bool ServiceUsernameChanged(Goatverse.GoatverseService.UserData userData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/ServiceUsernameChanged", ReplyAction="http://tempuri.org/IUsersManager/ServiceUsernameChangedResponse")]
        System.Threading.Tasks.Task<bool> ServiceUsernameChangedAsync(Goatverse.GoatverseService.UserData userData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/ServicePasswordAndUsernameChanged", ReplyAction="http://tempuri.org/IUsersManager/ServicePasswordAndUsernameChangedResponse")]
        bool ServicePasswordAndUsernameChanged(Goatverse.GoatverseService.UserData userData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/ServicePasswordAndUsernameChanged", ReplyAction="http://tempuri.org/IUsersManager/ServicePasswordAndUsernameChangedResponse")]
        System.Threading.Tasks.Task<bool> ServicePasswordAndUsernameChangedAsync(Goatverse.GoatverseService.UserData userData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/ServiceGetEmail", ReplyAction="http://tempuri.org/IUsersManager/ServiceGetEmailResponse")]
        string ServiceGetEmail(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/ServiceGetEmail", ReplyAction="http://tempuri.org/IUsersManager/ServiceGetEmailResponse")]
        System.Threading.Tasks.Task<string> ServiceGetEmailAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUsersManagerChannel : Goatverse.GoatverseService.IUsersManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UsersManagerClient : System.ServiceModel.ClientBase<Goatverse.GoatverseService.IUsersManager>, Goatverse.GoatverseService.IUsersManager {
        
        public UsersManagerClient() {
        }
        
        public UsersManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UsersManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UsersManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UsersManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool ServiceTryLogin(Goatverse.GoatverseService.UserData userData) {
            return base.Channel.ServiceTryLogin(userData);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceTryLoginAsync(Goatverse.GoatverseService.UserData userData) {
            return base.Channel.ServiceTryLoginAsync(userData);
        }
        
        public bool ServiceTrySignIn(Goatverse.GoatverseService.UserData userData) {
            return base.Channel.ServiceTrySignIn(userData);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceTrySignInAsync(Goatverse.GoatverseService.UserData userData) {
            return base.Channel.ServiceTrySignInAsync(userData);
        }
        
        public bool ServiceUserExistsByUsername(string userName) {
            return base.Channel.ServiceUserExistsByUsername(userName);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceUserExistsByUsernameAsync(string userName) {
            return base.Channel.ServiceUserExistsByUsernameAsync(userName);
        }
        
        public bool ServiceVerifyPassword(string password, string username) {
            return base.Channel.ServiceVerifyPassword(password, username);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceVerifyPasswordAsync(string password, string username) {
            return base.Channel.ServiceVerifyPasswordAsync(password, username);
        }
        
        public bool ServicePasswordChanged(Goatverse.GoatverseService.UserData userData) {
            return base.Channel.ServicePasswordChanged(userData);
        }
        
        public System.Threading.Tasks.Task<bool> ServicePasswordChangedAsync(Goatverse.GoatverseService.UserData userData) {
            return base.Channel.ServicePasswordChangedAsync(userData);
        }
        
        public bool ServiceUsernameChanged(Goatverse.GoatverseService.UserData userData) {
            return base.Channel.ServiceUsernameChanged(userData);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceUsernameChangedAsync(Goatverse.GoatverseService.UserData userData) {
            return base.Channel.ServiceUsernameChangedAsync(userData);
        }
        
        public bool ServicePasswordAndUsernameChanged(Goatverse.GoatverseService.UserData userData) {
            return base.Channel.ServicePasswordAndUsernameChanged(userData);
        }
        
        public System.Threading.Tasks.Task<bool> ServicePasswordAndUsernameChangedAsync(Goatverse.GoatverseService.UserData userData) {
            return base.Channel.ServicePasswordAndUsernameChangedAsync(userData);
        }
        
        public string ServiceGetEmail(string username) {
            return base.Channel.ServiceGetEmail(username);
        }
        
        public System.Threading.Tasks.Task<string> ServiceGetEmailAsync(string username) {
            return base.Channel.ServiceGetEmailAsync(username);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GoatverseService.ILobbyManager", CallbackContract=typeof(Goatverse.GoatverseService.ILobbyManagerCallback))]
    public interface ILobbyManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/ServiceSendMessageToLobby")]
        void ServiceSendMessageToLobby(Goatverse.GoatverseService.MessageData messageData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/ServiceSendMessageToLobby")]
        System.Threading.Tasks.Task ServiceSendMessageToLobbyAsync(Goatverse.GoatverseService.MessageData messageData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/ServiceConnectToLobby", ReplyAction="http://tempuri.org/ILobbyManager/ServiceConnectToLobbyResponse")]
        bool ServiceConnectToLobby(string username, string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/ServiceConnectToLobby", ReplyAction="http://tempuri.org/ILobbyManager/ServiceConnectToLobbyResponse")]
        System.Threading.Tasks.Task<bool> ServiceConnectToLobbyAsync(string username, string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/ServiceDisconnectFromLobby", ReplyAction="http://tempuri.org/ILobbyManager/ServiceDisconnectFromLobbyResponse")]
        bool ServiceDisconnectFromLobby(string username, string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/ServiceDisconnectFromLobby", ReplyAction="http://tempuri.org/ILobbyManager/ServiceDisconnectFromLobbyResponse")]
        System.Threading.Tasks.Task<bool> ServiceDisconnectFromLobbyAsync(string username, string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/ServiceCountPlayersInLobby", ReplyAction="http://tempuri.org/ILobbyManager/ServiceCountPlayersInLobbyResponse")]
        int ServiceCountPlayersInLobby(string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/ServiceCountPlayersInLobby", ReplyAction="http://tempuri.org/ILobbyManager/ServiceCountPlayersInLobbyResponse")]
        System.Threading.Tasks.Task<int> ServiceCountPlayersInLobbyAsync(string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/ServiceCreateLobby", ReplyAction="http://tempuri.org/ILobbyManager/ServiceCreateLobbyResponse")]
        bool ServiceCreateLobby(string username, string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/ServiceCreateLobby", ReplyAction="http://tempuri.org/ILobbyManager/ServiceCreateLobbyResponse")]
        System.Threading.Tasks.Task<bool> ServiceCreateLobbyAsync(string username, string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/ServiceStartLobbyMatch", ReplyAction="http://tempuri.org/ILobbyManager/ServiceStartLobbyMatchResponse")]
        bool ServiceStartLobbyMatch(string lobbyCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/ServiceStartLobbyMatch", ReplyAction="http://tempuri.org/ILobbyManager/ServiceStartLobbyMatchResponse")]
        System.Threading.Tasks.Task<bool> ServiceStartLobbyMatchAsync(string lobbyCode, string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/ServiceGetMessage")]
        void ServiceGetMessage(Goatverse.GoatverseService.MessageData messageData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/ServiceUpdatePlayersInLobby")]
        void ServiceUpdatePlayersInLobby(Goatverse.GoatverseService.PlayerData[] players);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/ServiceStartMatch")]
        void ServiceStartMatch(Goatverse.GoatverseService.PlayerData[] players);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/ServiceNotifyMatchStart")]
        void ServiceNotifyMatchStart();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/ServiceOwnerLeftLobby")]
        void ServiceOwnerLeftLobby(string newOwner);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyManagerChannel : Goatverse.GoatverseService.ILobbyManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyManagerClient : System.ServiceModel.DuplexClientBase<Goatverse.GoatverseService.ILobbyManager>, Goatverse.GoatverseService.ILobbyManager {
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ServiceSendMessageToLobby(Goatverse.GoatverseService.MessageData messageData) {
            base.Channel.ServiceSendMessageToLobby(messageData);
        }
        
        public System.Threading.Tasks.Task ServiceSendMessageToLobbyAsync(Goatverse.GoatverseService.MessageData messageData) {
            return base.Channel.ServiceSendMessageToLobbyAsync(messageData);
        }
        
        public bool ServiceConnectToLobby(string username, string lobbyCode) {
            return base.Channel.ServiceConnectToLobby(username, lobbyCode);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceConnectToLobbyAsync(string username, string lobbyCode) {
            return base.Channel.ServiceConnectToLobbyAsync(username, lobbyCode);
        }
        
        public bool ServiceDisconnectFromLobby(string username, string lobbyCode) {
            return base.Channel.ServiceDisconnectFromLobby(username, lobbyCode);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceDisconnectFromLobbyAsync(string username, string lobbyCode) {
            return base.Channel.ServiceDisconnectFromLobbyAsync(username, lobbyCode);
        }
        
        public int ServiceCountPlayersInLobby(string lobbyCode) {
            return base.Channel.ServiceCountPlayersInLobby(lobbyCode);
        }
        
        public System.Threading.Tasks.Task<int> ServiceCountPlayersInLobbyAsync(string lobbyCode) {
            return base.Channel.ServiceCountPlayersInLobbyAsync(lobbyCode);
        }
        
        public bool ServiceCreateLobby(string username, string lobbyCode) {
            return base.Channel.ServiceCreateLobby(username, lobbyCode);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceCreateLobbyAsync(string username, string lobbyCode) {
            return base.Channel.ServiceCreateLobbyAsync(username, lobbyCode);
        }
        
        public bool ServiceStartLobbyMatch(string lobbyCode, string username) {
            return base.Channel.ServiceStartLobbyMatch(lobbyCode, username);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceStartLobbyMatchAsync(string lobbyCode, string username) {
            return base.Channel.ServiceStartLobbyMatchAsync(lobbyCode, username);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GoatverseService.IProfilesManager")]
    public interface IProfilesManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfilesManager/ServiceLoadProfileData", ReplyAction="http://tempuri.org/IProfilesManager/ServiceLoadProfileDataResponse")]
        Goatverse.GoatverseService.ProfileData ServiceLoadProfileData(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfilesManager/ServiceLoadProfileData", ReplyAction="http://tempuri.org/IProfilesManager/ServiceLoadProfileDataResponse")]
        System.Threading.Tasks.Task<Goatverse.GoatverseService.ProfileData> ServiceLoadProfileDataAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfilesManager/ServiceChangeProfileImage", ReplyAction="http://tempuri.org/IProfilesManager/ServiceChangeProfileImageResponse")]
        bool ServiceChangeProfileImage(string username, int imageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfilesManager/ServiceChangeProfileImage", ReplyAction="http://tempuri.org/IProfilesManager/ServiceChangeProfileImageResponse")]
        System.Threading.Tasks.Task<bool> ServiceChangeProfileImageAsync(string username, int imageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfilesManager/ServiceGetProfileByUserId", ReplyAction="http://tempuri.org/IProfilesManager/ServiceGetProfileByUserIdResponse")]
        Goatverse.GoatverseService.ProfileData ServiceGetProfileByUserId(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfilesManager/ServiceGetProfileByUserId", ReplyAction="http://tempuri.org/IProfilesManager/ServiceGetProfileByUserIdResponse")]
        System.Threading.Tasks.Task<Goatverse.GoatverseService.ProfileData> ServiceGetProfileByUserIdAsync(string userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProfilesManagerChannel : Goatverse.GoatverseService.IProfilesManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProfilesManagerClient : System.ServiceModel.ClientBase<Goatverse.GoatverseService.IProfilesManager>, Goatverse.GoatverseService.IProfilesManager {
        
        public ProfilesManagerClient() {
        }
        
        public ProfilesManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProfilesManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProfilesManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProfilesManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Goatverse.GoatverseService.ProfileData ServiceLoadProfileData(string username) {
            return base.Channel.ServiceLoadProfileData(username);
        }
        
        public System.Threading.Tasks.Task<Goatverse.GoatverseService.ProfileData> ServiceLoadProfileDataAsync(string username) {
            return base.Channel.ServiceLoadProfileDataAsync(username);
        }
        
        public bool ServiceChangeProfileImage(string username, int imageId) {
            return base.Channel.ServiceChangeProfileImage(username, imageId);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceChangeProfileImageAsync(string username, int imageId) {
            return base.Channel.ServiceChangeProfileImageAsync(username, imageId);
        }
        
        public Goatverse.GoatverseService.ProfileData ServiceGetProfileByUserId(string userId) {
            return base.Channel.ServiceGetProfileByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<Goatverse.GoatverseService.ProfileData> ServiceGetProfileByUserIdAsync(string userId) {
            return base.Channel.ServiceGetProfileByUserIdAsync(userId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GoatverseService.IFriendsManager")]
    public interface IFriendsManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceSendFriendRequest", ReplyAction="http://tempuri.org/IFriendsManager/ServiceSendFriendRequestResponse")]
        bool ServiceSendFriendRequest(string username1, string username2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceSendFriendRequest", ReplyAction="http://tempuri.org/IFriendsManager/ServiceSendFriendRequestResponse")]
        System.Threading.Tasks.Task<bool> ServiceSendFriendRequestAsync(string username1, string username2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceRemoveFriend", ReplyAction="http://tempuri.org/IFriendsManager/ServiceRemoveFriendResponse")]
        bool ServiceRemoveFriend(string username1, string username2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceRemoveFriend", ReplyAction="http://tempuri.org/IFriendsManager/ServiceRemoveFriendResponse")]
        System.Threading.Tasks.Task<bool> ServiceRemoveFriendAsync(string username1, string username2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceAcceptFriendRequest", ReplyAction="http://tempuri.org/IFriendsManager/ServiceAcceptFriendRequestResponse")]
        bool ServiceAcceptFriendRequest(string username1, string username2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceAcceptFriendRequest", ReplyAction="http://tempuri.org/IFriendsManager/ServiceAcceptFriendRequestResponse")]
        System.Threading.Tasks.Task<bool> ServiceAcceptFriendRequestAsync(string username1, string username2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceGetFriends", ReplyAction="http://tempuri.org/IFriendsManager/ServiceGetFriendsResponse")]
        Goatverse.GoatverseService.PlayerData[] ServiceGetFriends(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceGetFriends", ReplyAction="http://tempuri.org/IFriendsManager/ServiceGetFriendsResponse")]
        System.Threading.Tasks.Task<Goatverse.GoatverseService.PlayerData[]> ServiceGetFriendsAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceIsPendingFriendRequest", ReplyAction="http://tempuri.org/IFriendsManager/ServiceIsPendingFriendRequestResponse")]
        bool ServiceIsPendingFriendRequest(string username1, string username2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceIsPendingFriendRequest", ReplyAction="http://tempuri.org/IFriendsManager/ServiceIsPendingFriendRequestResponse")]
        System.Threading.Tasks.Task<bool> ServiceIsPendingFriendRequestAsync(string username1, string username2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceGetPendingFriendRequest", ReplyAction="http://tempuri.org/IFriendsManager/ServiceGetPendingFriendRequestResponse")]
        Goatverse.GoatverseService.PlayerData[] ServiceGetPendingFriendRequest(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceGetPendingFriendRequest", ReplyAction="http://tempuri.org/IFriendsManager/ServiceGetPendingFriendRequestResponse")]
        System.Threading.Tasks.Task<Goatverse.GoatverseService.PlayerData[]> ServiceGetPendingFriendRequestAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceIsUserBlocked", ReplyAction="http://tempuri.org/IFriendsManager/ServiceIsUserBlockedResponse")]
        bool ServiceIsUserBlocked(string usernameBlocker, string usernameBlocked);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceIsUserBlocked", ReplyAction="http://tempuri.org/IFriendsManager/ServiceIsUserBlockedResponse")]
        System.Threading.Tasks.Task<bool> ServiceIsUserBlockedAsync(string usernameBlocker, string usernameBlocked);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceGetBlockedUsers", ReplyAction="http://tempuri.org/IFriendsManager/ServiceGetBlockedUsersResponse")]
        Goatverse.GoatverseService.PlayerData[] ServiceGetBlockedUsers(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceGetBlockedUsers", ReplyAction="http://tempuri.org/IFriendsManager/ServiceGetBlockedUsersResponse")]
        System.Threading.Tasks.Task<Goatverse.GoatverseService.PlayerData[]> ServiceGetBlockedUsersAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceRemoveBlock", ReplyAction="http://tempuri.org/IFriendsManager/ServiceRemoveBlockResponse")]
        bool ServiceRemoveBlock(string usernameBlocked, string usernameBlocker);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceRemoveBlock", ReplyAction="http://tempuri.org/IFriendsManager/ServiceRemoveBlockResponse")]
        System.Threading.Tasks.Task<bool> ServiceRemoveBlockAsync(string usernameBlocked, string usernameBlocker);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceBlockUser", ReplyAction="http://tempuri.org/IFriendsManager/ServiceBlockUserResponse")]
        bool ServiceBlockUser(string usernameBlocked, string usernameBlocker);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ServiceBlockUser", ReplyAction="http://tempuri.org/IFriendsManager/ServiceBlockUserResponse")]
        System.Threading.Tasks.Task<bool> ServiceBlockUserAsync(string usernameBlocked, string usernameBlocker);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendsManagerChannel : Goatverse.GoatverseService.IFriendsManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendsManagerClient : System.ServiceModel.ClientBase<Goatverse.GoatverseService.IFriendsManager>, Goatverse.GoatverseService.IFriendsManager {
        
        public FriendsManagerClient() {
        }
        
        public FriendsManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FriendsManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendsManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendsManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool ServiceSendFriendRequest(string username1, string username2) {
            return base.Channel.ServiceSendFriendRequest(username1, username2);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceSendFriendRequestAsync(string username1, string username2) {
            return base.Channel.ServiceSendFriendRequestAsync(username1, username2);
        }
        
        public bool ServiceRemoveFriend(string username1, string username2) {
            return base.Channel.ServiceRemoveFriend(username1, username2);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceRemoveFriendAsync(string username1, string username2) {
            return base.Channel.ServiceRemoveFriendAsync(username1, username2);
        }
        
        public bool ServiceAcceptFriendRequest(string username1, string username2) {
            return base.Channel.ServiceAcceptFriendRequest(username1, username2);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceAcceptFriendRequestAsync(string username1, string username2) {
            return base.Channel.ServiceAcceptFriendRequestAsync(username1, username2);
        }
        
        public Goatverse.GoatverseService.PlayerData[] ServiceGetFriends(string username) {
            return base.Channel.ServiceGetFriends(username);
        }
        
        public System.Threading.Tasks.Task<Goatverse.GoatverseService.PlayerData[]> ServiceGetFriendsAsync(string username) {
            return base.Channel.ServiceGetFriendsAsync(username);
        }
        
        public bool ServiceIsPendingFriendRequest(string username1, string username2) {
            return base.Channel.ServiceIsPendingFriendRequest(username1, username2);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceIsPendingFriendRequestAsync(string username1, string username2) {
            return base.Channel.ServiceIsPendingFriendRequestAsync(username1, username2);
        }
        
        public Goatverse.GoatverseService.PlayerData[] ServiceGetPendingFriendRequest(string username) {
            return base.Channel.ServiceGetPendingFriendRequest(username);
        }
        
        public System.Threading.Tasks.Task<Goatverse.GoatverseService.PlayerData[]> ServiceGetPendingFriendRequestAsync(string username) {
            return base.Channel.ServiceGetPendingFriendRequestAsync(username);
        }
        
        public bool ServiceIsUserBlocked(string usernameBlocker, string usernameBlocked) {
            return base.Channel.ServiceIsUserBlocked(usernameBlocker, usernameBlocked);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceIsUserBlockedAsync(string usernameBlocker, string usernameBlocked) {
            return base.Channel.ServiceIsUserBlockedAsync(usernameBlocker, usernameBlocked);
        }
        
        public Goatverse.GoatverseService.PlayerData[] ServiceGetBlockedUsers(string username) {
            return base.Channel.ServiceGetBlockedUsers(username);
        }
        
        public System.Threading.Tasks.Task<Goatverse.GoatverseService.PlayerData[]> ServiceGetBlockedUsersAsync(string username) {
            return base.Channel.ServiceGetBlockedUsersAsync(username);
        }
        
        public bool ServiceRemoveBlock(string usernameBlocked, string usernameBlocker) {
            return base.Channel.ServiceRemoveBlock(usernameBlocked, usernameBlocker);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceRemoveBlockAsync(string usernameBlocked, string usernameBlocker) {
            return base.Channel.ServiceRemoveBlockAsync(usernameBlocked, usernameBlocker);
        }
        
        public bool ServiceBlockUser(string usernameBlocked, string usernameBlocker) {
            return base.Channel.ServiceBlockUser(usernameBlocked, usernameBlocker);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceBlockUserAsync(string usernameBlocked, string usernameBlocker) {
            return base.Channel.ServiceBlockUserAsync(usernameBlocked, usernameBlocker);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GoatverseService.IMatchManager", CallbackContract=typeof(Goatverse.GoatverseService.IMatchManagerCallback))]
    public interface IMatchManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/ServiceCreateMatch", ReplyAction="http://tempuri.org/IMatchManager/ServiceCreateMatchResponse")]
        Goatverse.GoatverseService.MatchData ServiceCreateMatch(System.DateTime startTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/ServiceCreateMatch", ReplyAction="http://tempuri.org/IMatchManager/ServiceCreateMatchResponse")]
        System.Threading.Tasks.Task<Goatverse.GoatverseService.MatchData> ServiceCreateMatchAsync(System.DateTime startTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/ServiceGetMatchById", ReplyAction="http://tempuri.org/IMatchManager/ServiceGetMatchByIdResponse")]
        Goatverse.GoatverseService.MatchData ServiceGetMatchById(string matchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/ServiceGetMatchById", ReplyAction="http://tempuri.org/IMatchManager/ServiceGetMatchByIdResponse")]
        System.Threading.Tasks.Task<Goatverse.GoatverseService.MatchData> ServiceGetMatchByIdAsync(string matchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/ServiceUpdateMatch", ReplyAction="http://tempuri.org/IMatchManager/ServiceUpdateMatchResponse")]
        bool ServiceUpdateMatch(string matchId, string idWinner, System.Nullable<System.DateTime> endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/ServiceUpdateMatch", ReplyAction="http://tempuri.org/IMatchManager/ServiceUpdateMatchResponse")]
        System.Threading.Tasks.Task<bool> ServiceUpdateMatchAsync(string matchId, string idWinner, System.Nullable<System.DateTime> endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/ServiceGetRecentMatches", ReplyAction="http://tempuri.org/IMatchManager/ServiceGetRecentMatchesResponse")]
        Goatverse.GoatverseService.MatchData[] ServiceGetRecentMatches(int topN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/ServiceGetRecentMatches", ReplyAction="http://tempuri.org/IMatchManager/ServiceGetRecentMatchesResponse")]
        System.Threading.Tasks.Task<Goatverse.GoatverseService.MatchData[]> ServiceGetRecentMatchesAsync(int topN);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/ServiceInitializeGameTurns")]
        void ServiceInitializeGameTurns(string gameCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/ServiceInitializeGameTurns")]
        System.Threading.Tasks.Task ServiceInitializeGameTurnsAsync(string gameCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/ServiceNotifyEndTurn")]
        void ServiceNotifyEndTurn(string gameCode, string currentGamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/ServiceNotifyEndTurn")]
        System.Threading.Tasks.Task ServiceNotifyEndTurnAsync(string gameCode, string currentGamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/ServiceGetCurrentTurn", ReplyAction="http://tempuri.org/IMatchManager/ServiceGetCurrentTurnResponse")]
        string ServiceGetCurrentTurn(string gameCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/ServiceGetCurrentTurn", ReplyAction="http://tempuri.org/IMatchManager/ServiceGetCurrentTurnResponse")]
        System.Threading.Tasks.Task<string> ServiceGetCurrentTurnAsync(string gameCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/ServiceConnectToGame", ReplyAction="http://tempuri.org/IMatchManager/ServiceConnectToGameResponse")]
        bool ServiceConnectToGame(string username, string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManager/ServiceConnectToGame", ReplyAction="http://tempuri.org/IMatchManager/ServiceConnectToGameResponse")]
        System.Threading.Tasks.Task<bool> ServiceConnectToGameAsync(string username, string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/ServiceCreateDeck")]
        void ServiceCreateDeck(string gameCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/ServiceCreateDeck")]
        System.Threading.Tasks.Task ServiceCreateDeckAsync(string gameCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/ServiceNotifyDrawCard")]
        void ServiceNotifyDrawCard(string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/ServiceNotifyDrawCard")]
        System.Threading.Tasks.Task ServiceNotifyDrawCardAsync(string lobbyCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/ServiceNotifyEndGame")]
        void ServiceNotifyEndGame(string matchId, string winnerUsername);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/ServiceUpdateCurrentTurn")]
        void ServiceUpdateCurrentTurn(string currentTurn);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/ServiceSyncTimer")]
        void ServiceSyncTimer();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/ServiceReceiveDeck")]
        void ServiceReceiveDeck(System.Collections.Generic.Stack<Goatverse.GoatverseService.CardData> shuffledDeck);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManager/ServiceRemoveCardFromDeck")]
        void ServiceRemoveCardFromDeck();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchManagerChannel : Goatverse.GoatverseService.IMatchManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MatchManagerClient : System.ServiceModel.DuplexClientBase<Goatverse.GoatverseService.IMatchManager>, Goatverse.GoatverseService.IMatchManager {
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public Goatverse.GoatverseService.MatchData ServiceCreateMatch(System.DateTime startTime) {
            return base.Channel.ServiceCreateMatch(startTime);
        }
        
        public System.Threading.Tasks.Task<Goatverse.GoatverseService.MatchData> ServiceCreateMatchAsync(System.DateTime startTime) {
            return base.Channel.ServiceCreateMatchAsync(startTime);
        }
        
        public Goatverse.GoatverseService.MatchData ServiceGetMatchById(string matchId) {
            return base.Channel.ServiceGetMatchById(matchId);
        }
        
        public System.Threading.Tasks.Task<Goatverse.GoatverseService.MatchData> ServiceGetMatchByIdAsync(string matchId) {
            return base.Channel.ServiceGetMatchByIdAsync(matchId);
        }
        
        public bool ServiceUpdateMatch(string matchId, string idWinner, System.Nullable<System.DateTime> endTime) {
            return base.Channel.ServiceUpdateMatch(matchId, idWinner, endTime);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceUpdateMatchAsync(string matchId, string idWinner, System.Nullable<System.DateTime> endTime) {
            return base.Channel.ServiceUpdateMatchAsync(matchId, idWinner, endTime);
        }
        
        public Goatverse.GoatverseService.MatchData[] ServiceGetRecentMatches(int topN) {
            return base.Channel.ServiceGetRecentMatches(topN);
        }
        
        public System.Threading.Tasks.Task<Goatverse.GoatverseService.MatchData[]> ServiceGetRecentMatchesAsync(int topN) {
            return base.Channel.ServiceGetRecentMatchesAsync(topN);
        }
        
        public void ServiceInitializeGameTurns(string gameCode) {
            base.Channel.ServiceInitializeGameTurns(gameCode);
        }
        
        public System.Threading.Tasks.Task ServiceInitializeGameTurnsAsync(string gameCode) {
            return base.Channel.ServiceInitializeGameTurnsAsync(gameCode);
        }
        
        public void ServiceNotifyEndTurn(string gameCode, string currentGamertag) {
            base.Channel.ServiceNotifyEndTurn(gameCode, currentGamertag);
        }
        
        public System.Threading.Tasks.Task ServiceNotifyEndTurnAsync(string gameCode, string currentGamertag) {
            return base.Channel.ServiceNotifyEndTurnAsync(gameCode, currentGamertag);
        }
        
        public string ServiceGetCurrentTurn(string gameCode) {
            return base.Channel.ServiceGetCurrentTurn(gameCode);
        }
        
        public System.Threading.Tasks.Task<string> ServiceGetCurrentTurnAsync(string gameCode) {
            return base.Channel.ServiceGetCurrentTurnAsync(gameCode);
        }
        
        public bool ServiceConnectToGame(string username, string lobbyCode) {
            return base.Channel.ServiceConnectToGame(username, lobbyCode);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceConnectToGameAsync(string username, string lobbyCode) {
            return base.Channel.ServiceConnectToGameAsync(username, lobbyCode);
        }
        
        public void ServiceCreateDeck(string gameCode) {
            base.Channel.ServiceCreateDeck(gameCode);
        }
        
        public System.Threading.Tasks.Task ServiceCreateDeckAsync(string gameCode) {
            return base.Channel.ServiceCreateDeckAsync(gameCode);
        }
        
        public void ServiceNotifyDrawCard(string lobbyCode) {
            base.Channel.ServiceNotifyDrawCard(lobbyCode);
        }
        
        public System.Threading.Tasks.Task ServiceNotifyDrawCardAsync(string lobbyCode) {
            return base.Channel.ServiceNotifyDrawCardAsync(lobbyCode);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GoatverseService.ICardsManager")]
    public interface ICardsManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardsManager/ServiceGetAllCards", ReplyAction="http://tempuri.org/ICardsManager/ServiceGetAllCardsResponse")]
        Goatverse.GoatverseService.CardData[] ServiceGetAllCards();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardsManager/ServiceGetAllCards", ReplyAction="http://tempuri.org/ICardsManager/ServiceGetAllCardsResponse")]
        System.Threading.Tasks.Task<Goatverse.GoatverseService.CardData[]> ServiceGetAllCardsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardsManager/ServiceGetCardById", ReplyAction="http://tempuri.org/ICardsManager/ServiceGetCardByIdResponse")]
        Goatverse.GoatverseService.CardData ServiceGetCardById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardsManager/ServiceGetCardById", ReplyAction="http://tempuri.org/ICardsManager/ServiceGetCardByIdResponse")]
        System.Threading.Tasks.Task<Goatverse.GoatverseService.CardData> ServiceGetCardByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardsManager/ServiceAddCard", ReplyAction="http://tempuri.org/ICardsManager/ServiceAddCardResponse")]
        bool ServiceAddCard(Goatverse.GoatverseService.CardData cardData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardsManager/ServiceAddCard", ReplyAction="http://tempuri.org/ICardsManager/ServiceAddCardResponse")]
        System.Threading.Tasks.Task<bool> ServiceAddCardAsync(Goatverse.GoatverseService.CardData cardData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardsManager/ServiceDeleteCard", ReplyAction="http://tempuri.org/ICardsManager/ServiceDeleteCardResponse")]
        bool ServiceDeleteCard(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICardsManager/ServiceDeleteCard", ReplyAction="http://tempuri.org/ICardsManager/ServiceDeleteCardResponse")]
        System.Threading.Tasks.Task<bool> ServiceDeleteCardAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICardsManagerChannel : Goatverse.GoatverseService.ICardsManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CardsManagerClient : System.ServiceModel.ClientBase<Goatverse.GoatverseService.ICardsManager>, Goatverse.GoatverseService.ICardsManager {
        
        public CardsManagerClient() {
        }
        
        public CardsManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CardsManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CardsManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CardsManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Goatverse.GoatverseService.CardData[] ServiceGetAllCards() {
            return base.Channel.ServiceGetAllCards();
        }
        
        public System.Threading.Tasks.Task<Goatverse.GoatverseService.CardData[]> ServiceGetAllCardsAsync() {
            return base.Channel.ServiceGetAllCardsAsync();
        }
        
        public Goatverse.GoatverseService.CardData ServiceGetCardById(int id) {
            return base.Channel.ServiceGetCardById(id);
        }
        
        public System.Threading.Tasks.Task<Goatverse.GoatverseService.CardData> ServiceGetCardByIdAsync(int id) {
            return base.Channel.ServiceGetCardByIdAsync(id);
        }
        
        public bool ServiceAddCard(Goatverse.GoatverseService.CardData cardData) {
            return base.Channel.ServiceAddCard(cardData);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceAddCardAsync(Goatverse.GoatverseService.CardData cardData) {
            return base.Channel.ServiceAddCardAsync(cardData);
        }
        
        public bool ServiceDeleteCard(int id) {
            return base.Channel.ServiceDeleteCard(id);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceDeleteCardAsync(int id) {
            return base.Channel.ServiceDeleteCardAsync(id);
        }
    }
}
